#!/usr/bin/env node

console.log('----------------------------')
console.log('process.argv', process.argv)
console.log('----------------------------')

const arg_port = process.argv[2];
console.log('arg_port', arg_port)

const arg_dbname = process.argv[3];
console.log('arg_dbname', arg_dbname)

// console.log('==============================')
// console.log('process.env', process.env)
// console.log('==============================')

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('abc2:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || arg_port || 3000);
console.log('listing port=', port);

app.set('port', port);

/**
 * Create HTTP server.
 */


// const option = {
//   key: fs.readFileSync('../security/server.key'),
//   cert: fs.readFileSync('../security/server.crt'),
//   //requestCert: true,
//   requestCert: false,
//   rejectUnauthorized: false,
//   ca: [ fs.readFileSync('../security/server.crt') ]
// }

const option={}

//console.log('option', option)
var server = http.createServer(option, app);

//  var server = http.createServer({
//   key: fs.readFileSync('server.key'),
//   cert: fs.readFileSync('server.cert'),
//   requestCert: true,
//   rejectUnauthorized: false,
//   ca: [ fs.readFileSync('server.cert') ]
// },app);



// var server = https.createServer({
//   key: fs.readFileSync('./openssl/server.key'),
//   cert: fs.readFileSync('./openssl/server.cert')
// }, app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const WebSocket = require('ws');
const websocketserver = new WebSocket.Server({ server });
websocketserver.on('connection',app.websocket_handler.onconnection.bind(app.websocket_handler));
app.websocket_handler.set_server(websocketserver)

